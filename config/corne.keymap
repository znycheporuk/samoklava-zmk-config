/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEFAULT 0
#define LOWER   1
#define RAISE   2
#define ADJUST  3
#define LWR LOWER
#define RSE RAISE
#define ADJ ADJUST

&mt {
    quick-tap-ms = <180>;
    tapping-term-ms = <250>;
};

&lt {
    quick_tap_ms = <200>;
    tapping-term-ms = <180>;
};

/ {
    behaviors {
        //                 Key positions
        //       0  1  2  3  4  5    6  7  8  9 10 11
        //      12 13 14 15 16 17   18 19 20 21 22 23
        //      24 25 26 27 28 29   30 31 32 33 34 35
        //               36 37 38   39 40 41

        hml: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <250>;
            quick-tap-ms = <160>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <
                                         6  7  8  9 10
                       13 14 15 16      18 19 20 21 22
                          26            30 31 32 33 34
                             36 37 38   39 40 41
            >;

            // <---[[right-hand keys + all homerow mods + all thumbs]]
        };

        hmr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <250>;
            quick-tap-ms = <180>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <
                        1  2  3  4  5
                       13 14 15 16 17      19 20 21 22
                       25 26 27 28 29            33
                             36 37 38   39 40 41
            >;

            // <---[[left-hand keys + all homerow mods + all thumbs]]
        };

        lock: lock {
            compatible = "zmk,behavior-tap-dance";
            label = "LOCK";
            #binding-cells = <0>;
            bindings = <&lt 0 SPACE>, <&kp K_LOCK>;

            tapping-term-ms = <200>;
        };

        lang: lang {
            compatible = "zmk,behavior-tap-dance";
            label = "LANG";
            #binding-cells = <0>;
            bindings = <&lt 0 ENTER>, <&lang_m>;
        };
    };

    combos {
        compatible = "zmk,combos";

        esc {
            bindings = <&kp ESC>;
            key-positions = <2 14>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <14 26>;
        };

        backspase {
            bindings = <&kp BACKSPACE>;
            key-positions = <9 21>;
        };

        del {
            bindings = <&kp DEL>;
            key-positions = <33 21>;
        };

        toggle-num {
            bindings = <&tog 1>;
            key-positions = <2 4>;
        };

        toggle-qwerty {
            bindings = <&tog 6>;
            key-positions = <1 2 3>;
            layers = <0 6>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <4 4>;
            then-layer = <4>;
        };
    };

    macros {
        lang_m: lang_m {
            compatible = "zmk,behavior-macro";
            label = "LANG_M";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_GUI>,
                <&macro_tap>,
                <&kp SPACE>,
                <&macro_release>,
                <&kp LGUI>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        graphite {
            bindings = <
&none  &kp B            &kp L            &kp D         &kp W         &kp Z        &kp SQT      &kp F            &kp O         &kp U        &kp J        &none
&none  &hml LEFT_GUI N  &hml LEFT_ALT R  &hml LCTRL T  &hml LSHFT S  &kp G        &kp Y        &hmr RSHFT H     &hmr RCTRL A  &hmr RALT E  &hmr RCMD I  &none
&none  &kp Q            &kp X            &kp M         &kp C         &kp V        &kp K        &kp P            &kp DOT       &kp MINUS    &kp FSLH     &none
                                         &lt 2 ESCAPE  &lt 3 SPACE   &lt 0 TAB    &lt 4 ENTER  &lt 1 BACKSPACE  &lt 5 DELETE
            >;
        };

        num {
            bindings = <
&none  &kp PLUS   &kp N1  &kp N2  &kp N3  &kp LS(STAR)    &none   &none      &none      &none     &none     &none
&none  &kp EQUAL  &kp N4  &kp N5  &kp N6  &kp N0          &tog 1  &kp RSHFT  &kp RCTRL  &kp RALT  &kp RGUI  &none
&none  &kp MINUS  &kp N7  &kp N8  &kp N9  &kp FSLH        &none   &none      &none      &none     &none     &none
                          &trans  &trans  &trans          &trans  &trans     &trans
            >;
        };

        media {
            bindings = <
&none  &none  &none  &none   &none   &none     &bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1       &bt BT_SEL 2      &bt BT_SEL 3  &none
&none  &none  &none  &none   &none   &tog 2    &none       &kp K_MUTE    &kp C_VOLUME_DOWN  &kp C_VOLUME_UP   &none         &none
&none  &none  &none  &none   &none   &none     &none       &kp K_PREV    &kp K_STOP         &kp K_PLAY_PAUSE  &kp K_NEXT    &none
                     &trans  &trans  &trans    &trans      &trans        &trans
            >;
        };

        nav {
            bindings = <
&none  &none     &none     &none      &none      &none     &kp LS(GREATER_THAN)  &kp LBKT  &kp RBKT   &kp LS(LPAR)  &kp LS(RPAR)  &none
&none  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &tog 3    &kp LS(LESS_THAN)     &kp LEFT  &kp DOWN   &kp UP        &kp RIGHT     &none
&none  &none     &none     &none      &none      &none     &kp INSERT            &kp HOME  &kp PG_DN  &kp PG_UP     &kp END       &none
                           &trans     &trans     &trans    &trans                &trans    &trans
            >;
        };

        sym {
            bindings = <
&none  &kp GRAVE         &kp LS(EXCL)  &kp LS(AT)     &kp LS(POUND)  &kp BSLH    &none   &none      &none      &none     &none     &none
&none  &kp COLON         &kp LS(DLLR)  &kp LS(PRCNT)  &kp LS(CARET)  &kp SEMI    &tog 4  &kp RSHFT  &kp RCTRL  &kp RALT  &kp RGUI  &none
&none  &kp SINGLE_QUOTE  &kp LS(AMPS)  &kp LS(STAR)   &kp COMMA      &kp FSLH    &none   &none      &none      &none     &none     &none
                                       &trans         &trans         &trans      &trans  &trans     &trans
            >;
        };

        fun {
            bindings = <
&none  &none  &kp F1  &kp F2  &kp F3  &kp F10    &none   &none      &none      &none     &none     &none
&none  &none  &kp F4  &kp F5  &kp F6  &kp F11    &tog 5  &kp RSHFT  &kp RCTRL  &kp RALT  &kp RGUI  &none
&none  &none  &kp F7  &kp F8  &kp F9  &kp F12    &none   &none      &none      &none     &none     &none
                      &trans  &trans  &trans     &trans  &trans     &trans
            >;
        };

        qwerty {
            bindings = <
&trans  &kp Q            &kp W            &kp E         &kp R              &kp T     &kp Y   &kp U               &kp I         &kp O             &kp P                     &trans
&trans  &hml LEFT_GUI A  &hml LEFT_ALT S  &hml LCTRL D  &hml LEFT_SHIFT F  &kp G     &kp H   &hmr RIGHT_SHIFT J  &hmr RCTRL K  &hmr RIGHT_ALT L  &hmr RIGHT_GUI SEMICOLON  &trans
&trans  &kp Z            &kp X            &kp C         &kp V              &kp B     &kp N   &kp M               &kp COMMA     &kp DOT           &kp FSLH                  &trans
                                          &trans        &trans             &trans    &trans  &trans              &trans
            >;
        };
    };
};
